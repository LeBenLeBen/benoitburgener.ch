---
permalink: sw.js
---

const version = '{{ site.buildDate }}';
const staticCacheName = 'static-files-' + version;
const imagesCacheName = 'images';
const pagesCacheName = 'pages';
const cachesList = [
  staticCacheName,
  imagesCacheName,
  pagesCacheName,
];
const staticFiles = [
  '/offline.html',
  '/favicon.ico',
  '/assets/css/main.css',
  '/assets/icons/sprite.svg',
]

addEventListener('install', function(e) {
  e.waitUntil(
    caches.open(staticCacheName).then(staticCache => {
      return staticCache.addAll(staticFiles);
    }).then(() => {
      skipWaiting();
    })
  );
});

addEventListener('activate', function(e) {
  e.waitUntil(
    caches.keys()
      .then(cacheNames => {
        return Promise.all(cacheNames.map(cacheName => {
          if (!cachesList.includes(cacheName)) {
            return caches.delete(cacheName);
          }
        }))
      })
      .then(() => {
        return clients.claim();
      })
  )
});

addEventListener('fetch', function(e) {
  const { request } = e;

  /**
   * Fetch HTML pages and store them in the cache
   * If the request fail, display the one from the cache
   * If the page isn't cached, show the offline page
   */
  if (request.headers.get('Accept').includes('text/html')) {
    e.respondWith(
      fetch(request).then(responseFromFetch => {
        const responseCopy = responseFromFetch.clone();
        e.waitUntil(
          caches.open(pagesCacheName).then(pagesCache => {
            pagesCache.put(request, responseCopy);
          })
        );
        return responseFromFetch;
      }).catch(error => {
        return caches.match(request).then(responseFromCache => {
          if (responseFromCache) {
            return responseFromCache;
          }
          return caches.match('/offline.html');
        });
      })
    );
    return;
  }

  /**
   * Try to grab the image from the cache first
   * If it’s present, return it and fetch it from the server to update it asynchronously
   * If it isn’t, fetch it from the server
   */
  if (request.headers.get('Accept').includes('image')) {
    e.respondWith(
      caches.match(request).then(responseFromCache => {
        if (responseFromCache) {
          e.waitUntil(
            fetch(request).then(responseFromFetch => {
              caches.open(imagesCacheName).then(imagesCache => {
                return imagesCache.put(request, responseFromFetch);
              })
            })
          )
          return responseFromCache;
        }

        return fetch(request).then(responseFromFetch => {
          const responseCopy = responseFromFetch.clone();
          e.waitUntil(
            caches.open(imagesCacheName).then(imagesCache => {
              imagesCache.put(request, responseCopy);
            })
          );
          return responseFromFetch;
        });
      })
    );
    return;
  }

  /**
   * Grab all other items from the cache first, otherwise fetch them
   */
  e.respondWith(caches.match(request).then(responseFromCache => {
    return responseFromCache || fetch(request);
  }))
});
